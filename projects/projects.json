[
  {
    "path": "projects/2022/100386498/",
    "title": "The World Bank's Richer Countries Tend to Have Higher National Poverty Lines Chart",
    "description": "The aim of this project is to recreate and improve a chart from the first Atlas of Sustainable Development Goals.",
    "author": [
      {
        "name": "Isabela Zeberio",
        "url": {}
      }
    ],
    "date": "2023-01-08",
    "categories": [
      "2022"
    ],
    "contents": "\n\nContents\nSustainable Development Goals\nGetting the data\nLibraries\nCountry groups\n\nBuilding the chart\nData\nScale transformation\nAxes and panel grid\nColor of dots\nCountry labels\nText\nLegend\nBackground\n\nFinal chart\nInteractive chart\n\n\nDiagram listing the 17 Sustainable Development Goals. Figure from un.orgThe Atlas of Sustainable Development Goals is a compilation of statistics from over 200 economies about global development and the quality of people’s lives. The Atlas is a visual guide to the trends, challenges and measurement issues related to each of the 17 Sustainable Development Goals (SDGs). The SDGs are an urgent call for action by all countries in a global partnership. The Atlas was first created in 2017 and since then two more editions have been published, 2018 and 2020. From 2017 to 2020 there has been a big change in the visualization of the data.. Therefore, for this project I have decided to focus on recreating a chart from the first Atlas and improve some elements to better represent the idea that richer countries tend to have higher national poverty lines.\nSustainable Development Goals\n\n1. No poverty\n2. Zero hunger\nEnd poverty in all its forms everywhere\nEnd hunger, achieve food security and improved nutrition, and promote sustainable agriculture\n3. Good health and well-being\n4. Quality education\nEnsure healthy lives and promote well-being for all at all ages\nEnsure inclusive and equitable quality education and promote lifelong learning opportunities for all\n5. Gender equality\n6. Clean water and sanitation\nAchieve gender equality and empower all women and girls\nEnsure availability and sustainable management of water and sanitation for all\n7. Affordable and clean energy\n8. Decent work and economic growth\nEnsure access to affordable, reliable, sustainable, and modern energy for all\nPromote sustained, inclusive, and sustainable economic growth, full and productive employment, and decent work for all\n9. Industry, innovation, and infrastructure\n10. Reduced inequalities\nBuild resilient infrastructure, promote inclusive and sustainable industrialization, and foster innovation\nReduce inequality within and among countries\n11. Sustainable cities and communities\n12. Responsible consumption and production\nMake cities and human settlements inclusive, safe, resilient, and sustainable\nEnsure sustainable consumption and production patterns\n13. Climate action\n14. Life below water\nTake urgent action to combat climate change and its impacts by regulating emissions and promoting developments in renewable energy\nConserve and sustainably use the oceans, seas and marine resources for sustainable development\n15. Life on land\n16. Peace, justice and strong institutions\nProtect, restore and promote sustainable use of terrestrial ecosystems, sustainably manage forests, combat desertification, and halt and reverse land degradation and halt biodiversity loss\nPromote peaceful and inclusive societies for sustainable development, provide access to justice for all and build effective, accountable and inclusive institutions at all levels\n17. Partnership for the goals\n\nStrengthen the means of implementation and revitalize the global partnership for sustainable development\n\n\nThe chart I have chosen is from the first SDGs: No poverty. In the section on Reducing poverty in all its dimensions according to national definitions, the figure 1c is introduced to represent how richer countries tend to have higher national poverty lines than poorer ones, and in some cases a richer country may even have a higher national poverty rate than a poorer country.\nThe World Bank’s Chart. Figure from worldbank.orgGetting the data\nThe data consist on country observations of national poverty lines and household final consumption expenditure (HFCE). I retrieved the data from the Jolliffe & Beer Prydz (2016) paper on Estimating International Poverty Lines from Comparable National Thresholds. In the Appendix 2: Poverty lines and economic variables, used in main specifications, there is a table with the data required to replicate the chart.\nLibraries\n\n\nlibrary(readr)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(janitor)\nlibrary(showtext)\nlibrary(ggtext) \n\n\nI created the csv file coping the data from the Appendix 2 table. The variables needed to recreate the chart are the following:\n\n\nworld_bank <- read_delim(\n  \"povertyline.csv\", delim = \";\", escape_double = FALSE,\n  col_types = cols(`National poverty line 2011 PPPs` = col_number(),\n                   `Household survey mean 2011 PPPs` = col_number(),\n                   `HFCE (2011 PPPs)` = col_number(),\n                   `GNI (2011 USD, Atlas)` = col_number()),\n  trim_ws = TRUE, skip = 1)\n\n\nworld_bank <-  world_bank %>% \n  janitor::clean_names() %>% \n  select(-c(source_of_national_poverty_rate)) %>% \n  rename(\"country\" = country_territory,\n         \"national_povt_line\" = national_poverty_line_2011_pp_ps,\n         \"household_survey\" = household_survey_mean_2011_pp_ps,\n         \"HFCE\" = hfce_2011_pp_ps,\n         \"GNI\" = gni_2011_usd_atlas) \n\n\n\n\nglimpse(world_bank)\n\nRows: 126\nColumns: 6\n$ country            <chr> \"Zambia\", \"West Bank and Gaza\", \"Vietnam\"…\n$ year               <dbl> 2007, 2009, 2012, 2006, 2011, 2010, 2011,…\n$ national_povt_line <dbl> 1.83, 6.06, 3.35, 6.28, 6.92, 21.70, 21.2…\n$ household_survey   <dbl> 2.66, 10.76, 8.07, 11.63, 23.09, 62.38, 4…\n$ HFCE               <dbl> NA, 9.72, 7.83, 20.99, 30.49, 92.57, 59.1…\n$ GNI                <dbl> 2.62, 5.91, 4.23, 18.59, 32.90, 136.28, 1…\n\n\n\nsummary(world_bank)\n\n   country               year      national_povt_line\n Length:126         Min.   :2001   Min.   : 1.270    \n Class :character   1st Qu.:2009   1st Qu.: 2.203    \n Mode  :character   Median :2011   Median : 4.585    \n                    Mean   :2010   Mean   : 7.872    \n                    3rd Qu.:2011   3rd Qu.: 8.290    \n                    Max.   :2012   Max.   :35.120    \n                                                     \n household_survey       HFCE             GNI        \n Min.   :  1.450   Min.   : 1.220   Min.   :  0.43  \n 1st Qu.:  3.865   1st Qu.: 5.635   1st Qu.:  2.77  \n Median :  9.335   Median :15.880   Median : 11.04  \n Mean   : 22.403   Mean   :22.083   Mean   : 33.57  \n 3rd Qu.: 20.523   3rd Qu.:30.915   3rd Qu.: 35.51  \n Max.   :800.000   Max.   :92.570   Max.   :247.32  \n                   NA's   :11       NA's   :2       \n\nCountry groups\nThe World Bank has an income classification by which it separates countries into four categories based on per capita gross national income (GNI): low-income, lower-middle, upper-middle, and high-income countries. To create the categories, I first calculated the GNI per capita quartile:\n\n\nquantile(world_bank$GNI, na.rm=TRUE)\n\n     0%     25%     50%     75%    100% \n  0.430   2.770  11.040  35.505 247.320 \n\nAfter calculating GNI per capita quartile, I create a new column to group each country in its corresponding category:\n\n\nqntile <-  world_bank %>% \n  mutate(GNI = replace_na(GNI, 0)) %>% \n  mutate(country_class = \n           case_when(GNI <= 2.770  ~ \"Low income\",\n                     GNI > 2.770  & GNI <= 11.040 ~ \"Lower middle income\",\n                     GNI > 11.040 & GNI <= 35.505   ~ \"Upper middle income\",\n                     GNI > 35.505 ~ \"High income\")) \n\n\nqntile %>% group_by(country_class) %>% \n    summarise(country = n_distinct(country)) %>% \n    arrange(desc(country))\n\n# A tibble: 4 × 2\n  country_class       country\n  <chr>                 <int>\n1 Low income               33\n2 High income              31\n3 Lower middle income      31\n4 Upper middle income      31\n\nDespite grouping the countries following the indications from the article by Jolliffe & Beer Prydz (2016), I obtained a slightly different classification. These differences mean that in my final chart some countries (dots) are colored differently than in the original chart.\nTable 2: International Poverty Lines: Median and mean national lines, by group. Figure from Jolliffe & Beer Prydz (2016)In order to maintain the order in which the categories are shown in the legend I used the function factor:\n\n\nqntile$country_class <- factor(\n  qntile$country_class,levels = c(\"Low income\",\"Lower middle income\",\n                                  \"Upper middle income\", \"High income\"))\n\n\nBuilding the chart\nData\nThe World Bank’s chart is a scatterplot in which each dot represents a country, they are colored by income group. The idea is to create a scatterplot with points that have different colors and fills depending on the value of the country_class variable.\nThe variable country_class will be used to determine the color and fill of the plotted points by using these arguments through aes().\nThe y axis has a blank space as label because in the original it is displayed under the title.\nShape 21 of geom_point allows us to use the outline and fill arguments for the dots, which will be important later on.\nstroke enables us to change the line’s width. I will recreate the dots from the original chart by setting a thick outline and filling the dots in white.\n\n\np<-ggplot(qntile) +\n  aes(x=HFCE, y=national_povt_line, \n      color=country_class,\n      fill=country_class) + \n  ylab(\"\") + \n  xlab(\n    \"Household final consumption expenditure per capita per day, 2000-12 (2011 PPP $)\"\n    ) +\n  geom_point(size=3, shape=21, stroke=3) \np\n\n\n\nScale transformation\nIn the original chart what is plotted is the log of HFCE and the log of the national poverty line. The limit of the x axis is 100 and the limit of the y axis is 40, and the origin is 1. The breaks of both axes are really specific, thus I specified all of them.\n\n\np <- p + scale_y_log10(\n  limits=c(1, 40),\n  expand=expansion(0),\n  breaks=c(1,1.5,2,3,4,5,7,10,15,20,30,40),\n  labels=c(\"1\",\"1.5\",\"2\",\"3\",\"4\",\"5\",\"7\",\"10\",\"15\",\"20\",\"30\",\"40\"))+\n  scale_x_log10(\n    limits = c(1, 100),\n    expand = expansion(0),\n    breaks= c(1,1.5,2,3,4,5,7,10,15,20,30,40,50,70,100),\n    labels = c(\"1\",\"1.5\",\"2\",\"3\",\"4\",\"5\",\"7\",\"10\",\"15\",\"20\",\n               \"30\",\"40\",\"50\",\"70\",\"100\"))\np\n\n\n\nThe other major difference with respect to the distribution and classification of the data is that in my chart the relationship between the national poverty line and HFCE starts lower than in the original. I have not been able to figure out why this happens or how to fix it.\nAxes and panel grid\nAs the theme of the original graph is quite peculiar and very different from R’s aesthetics, I will be changing every element to make it as similar as the original instead of using a complete theme.\nI used the theme function to customize the panel and the axes. After specifying the colors of the panel background and lines, and also removing the lines in between the numbers with element_blank, I specified the style of the axes’ numbers and removed the its ticks.\n\n\np <- p + theme(panel.background = element_rect(fill=\"#f8f8f8\"), \n        panel.grid.major = element_line(\n          color = \"#dbddde\",size = 0.5,linetype = 1),\n        panel.border = element_rect(\n          fill = \"transparent\",color = \"#d5d7d8\",size = 0.5), \n        panel.grid.minor = element_blank(),\n        axis.text = element_text(face=\"bold\",\n                                 color=\"#58595b\",size=12),\n        axis.ticks = element_blank())\np\n\n\n\nColor of dots\nThe color of the dots are what made this graph more difficult to recreate. By combining stroke aesthetic with scale_manual, I created a unique scale to specify the World Bank’s aesthetic values. I filled the dots from the Low income and Lower middle income categories in white and those from Upper middle income and High income with its respective color to create the impression that they are solid.\n\n\np <- p +\n  scale_fill_manual(values=c(\"Low income\" =\"white\",\n                             \"Lower middle income\" =\"white\",\n                             \"Upper middle income\" =\"#e28e8e\", \n                             \"High income\" = \"#cd1349\")) +\n  scale_colour_manual(values=c(\"Low income\" =\"#58595b\",\n                               \"Lower middle income\" =\"#939598\",\n                               \"Upper middle income\" =\"#e28e8e\", \n                               \"High income\" = \"#cd1349\")) \np\n\n\n\nCountry labels\nWith the function annotate we can add geoms to the plot passed as vectors which is very useful to display the countries’ labels.\nIn the original chart some dots have a label which indicates the country and the reference year in which data was collected. It is not stated why these countries should be highlighted over the others. In addition, in some cases it is not very clear to which dot the label refers to as some are really close to each other. I specified the position of each label with hjust and vjust which control the alignment of the labels.\nHorizontal(hjust) and vertical(vjust) justification have the same parameterisation, either a string (“top”, “middle”, “bottom”, “left”, “center”, “right”) or a number between 0 and 1. Although it is recommended not to use number outside the range (0, 1), in order to recreate the country labeling of the original chart, I used numbers outside the range.\nTop = 1, middle = 0.5, bottom = 0\nLeft = 0, center = 0.5, right = 1\n\n\np <- p + annotate(\n  \"text\",\n  x = c(1.44, 1.9, 1.58, 2.72, 2.76, 5.96, 5.31, 4.4, 3.79, 5.2, 6.48, 9.28,\n        9.47, 13.9,7.96, 13.36, 12.52, 17.91, 29.61, 22.88,16.46,15.88,\n        28.99, 26.12, 31.85, 35.4, 33.95, 29.28, 27.98, 35.52,35.9,46.8,\n        39.98, 49.03, 63.41),\n  y = c(1.27, 1.45, 1.86, 2.1, 2.53, 1.76, 2.75, 3.7, 3.89, 4.46, 5.19,6.43,\n        7.63, 6.32,2.97, 2.14, 2.60, 3.08, 2.82, 3.38, 3.8, 3.87,5.24, 6.06,\n        7.17, 8.01, 9.16, 9.62,11.07, 12.98, 15.69, 18.63,19.37, 20.33, \n        35.12), \n  label = c(\"Malawi (2010)\",\"Mozambique (2009)\",\"Niger (2011)\",\"Togo (2011)\",\n            \"Guinea (2012)\",\"Lesotho (2010)\",\"Cong, Rep. (2011)\",\"Mauritania \n            (2008)\",\"Comoros (2004)\",  \"Tajikistan (2009)\",\"Azerbaijan \n            (2001)\",\"Honduras (2011)\",\"Bolivia (2011)\",\"Paraguay \n            (2011)\",\"Bhutan (2012)\", \"Namibia (2010)\",\"Sri Lanka \n            (2010)\",\"Swaziland (2010)\",\"Turkey (2011)\", \"Malaysia \n            (2009)\",\"Albania (2012)\",\"Armenia (2011)\",\"Romania (2011)\", \n            \"Montenegro (2011)\",\"Chile (2011)\",\"Poland (2011)\", \"Lithuania \n            (2011)\",\"Croatia (2011)\",\"Estonia (2011)\",\"Czech Rep \n            (2011)\",\"Slovak Rep. (2011)\", \"Spain (2011)\",\"Slovenia (2011)\", \n            \"Ireland (2011)\", \"Norway(2011)\"),\n  hjust = c(0.5, 0.15, 0.5, 1.2, 1.2, 0.65, 1.2, 0.5, 1.25, 1.25, 1.2,1.25,\n            -0.2, 0.5, -0.25, -0.2, -0.15, 0.5,0.3, -0.15, 0.65, -0.2, -0.2,\n            -0.1, -0.15, -0.15, -0.1, 1.15, -0.15, 1.15,-0.15, -0.15, 1.15, \n            0.95, 1.15),\n  vjust = c(2, 2, 2, 0.45, 0.45, 2.5, -1.5, 2.5, 0.35, 0.5, 0.15, 0.1,0,-1.5,\n            0.15, 0.2, 1.15, 3, 3, 0.25, 2, -1.6,0.55, 0, 0.5,0.25, 0.3, \n            0.25, 0.35, 0.5, 0.35, 2.5,0.45, -2, 0.25),\n  size= 3.5,\n  color = \"#58595b\") \np\n\n\n\nText\nIn this segment I add to the chart the title, the subtitle, and the caption. I used a <span> element to set the two colors of the title.\n\n\np <- p +\n  labs(title = \"<span style='color: #cd1449;'>1c<span><span style=\n  'color: #444444;'> Richer countriestend to have higher national poverty lines<span>\",\n       subtitle = \"National per capita per day poverty line, 2000–12 (2011 PPP $)\",\n       x = \"Household final consumption expenditure per capita per day, 2000-12 (2011 PPP $)\",\n       y = \"\",\n       caption = \"Source: Jolliffe, D. M., and E. B. Prydz. 2016, \n       Estimating International Poverty Lines from Comparable National Thresholds,\n       Policy Research Working Paper WPS 7606, Washington, DC: World Bank Group.\") +\n  theme(text = element_text(size = 12),\n        plot.title = element_markdown(face = \"bold\", hjust = 0),\n        plot.subtitle = element_markdown(hjust=0),\n        plot.caption = element_markdown(face = \"bold\",hjust = 0.1))\np\n\n\n\nLegend\nThe legend of the original chart is located on the upper left corner of the panel, to move it out there I used the argument of legend.position. Because the legend does not have a title or a key I used element_blank to remove them.\n\n\np <- p + theme(legend.text=element_text(size=10),\n        legend.position = c(0.095,0.91), \n        legend.title = element_blank(),  \n        legend.key = element_blank())\np\n\n\n\nBackground\nThe last touch to replicate the original chart is to color the background in light grey with plot.background. To do this, I first use plot.margin to control the margins around the plot. This code sets top margin to 1 cm, the right margin to 4 cm, the bottom margin to 1 cm, and the left margin to 4 cm. Despite setting the caption to the left of the plot, I could not figure put how to align it with the title and the subtitle.\n\n\np <- p + theme(plot.margin = unit(c(1,4,1,4),\"cm\"),\n          plot.background = element_rect(fill=\"#f8f8f8\"),\n          plot.title = element_markdown (hjust =-0.35),\n          plot.subtitle = element_markdown(hjust=-0.25),\n          plot.caption.position = \"plot\",\n          plot.caption = element_markdown(hjust= -0.25))   \np\n\n\n\nFinal chart\nThe World Bank’s chart is trying to represent the relationship between the HFCE and the national poverty line to showcase how richer countries have higher national poverty lines. The visual channels I will focus on to build an alternative chart are the xy position and the hue.\nTo represent this relationship it is important that the dots of the scatterplot inform us about the values of each country and the global pattern. One possible way to deal with overplotting faceting: the same plot is repeated, each time highlighting another group. A nice way to keep the global and the between groups comparisons is to plot the non-group dots in the background and in light grey (general context data).\nMoreover, I have decided to keep the logarithmic transformation because it helps the visualization of the data. It also helps to the representation of the information that the axes are not shown in logarithmic scale, and are rather displayed in the original scale.\nAs in the original graph it was a bit confusing to know precisely which dot the label was referring to, by now having four facets, there is more space to specify each country. To do this I used library(ggrepel).\nIn addition, to enhance the colors of the dots I used the color scheme by Carto to make more visible the different groups.\n\n\np1 <- ggplot(qntile, \n             aes(HFCE, national_povt_line, color=country_class, label=country)) + \n  geom_point(data = transform(qntile,\n     country_class = NULL), colour = \"grey80\") + \n  geom_point(alpha=0.7) +\n  scale_color_manual(values = c(\"#5F4690\",\"#38A6A5\", \"#73AF48\", \"#E17C05\"))+\n  facet_grid(~country_class, scales = \"free\") + \n  theme_bw() + \n  labs(title = \"<span style='color: #CC503E;'>1c<span><span style='color: #000000;'> \n  Richer countries tend to have higher national poverty lines<span>\",\n  subtitle=\"Class country\",\n  x = \"Household final consumption expenditure per capita per day, 2000-12 \n  (2011 PPP $)\",\n  y = \"National per capita per day poverty line, 2000–12 (2011 PPP $)\",\n  caption = \"Source: Jolliffe, D. M., and E. B. Prydz. 2016, Estimating \n  International PovertyLines from Comparable National Thresholds, Policy Research \n  Working Paper WPS 7606, Washington, DC: World Bank Group.\") +\n  scale_x_log10()+\n  scale_y_log10()+\n  theme(text = element_text(size = 6),\n        legend.position=\"top\",\n        legend.title = element_blank(),\n        legend.background = element_rect(size=0.5, linetype=\"solid\", \n                                  colour =\"#b2b2b2\"),\n        plot.title = element_markdown (face = \"bold\", hjust = 0),\n        plot.subtitle = element_markdown(face = \"bold\",hjust = 0.5),\n        axis.title.x  = element_markdown(),\n        axis.title.y = element_markdown(),\n        plot.caption = element_markdown(face = \"bold\",hjust = 0.1)) +\n  guides(color = guide_legend(override.aes = list(size = 3)))\n\np1 <- p1 + ggrepel::geom_text_repel(size=2, aes(label=country),\n                                    box.padding = 0.1,  max.overlaps = 6,\n                                     min.segment.length = 0.05,\n                                    point.size = 2) \np1\n\n\n\nInteractive chart\nAnother alternative visualization is to plot an interactive scatterplot by using ploytly. This way more information is added to every dot without increasing data density:\nCountry\nYear\nNational poverty line\nHousehold final consumption\nGNI\n\n\nlibrary(plotly)\n\np2 <-  qntile %>%\n   mutate(text = paste(\"Country: \", country, \"\\nYear: \", \n                       year, \"\\nNational poverty live: \", national_povt_line,\n                       \"\\nHousehold final consumption: \", \n                       HFCE, \"\\nGNI: \", GNI,sep=\"\")) %>% \n   ggplot(aes(x=HFCE, y=national_povt_line, color = country_class, text=text)) +\n   geom_point(alpha=0.7) +\n   scale_size(range = c(1.4, 19), name=\"Dollars ($)\") +\n   scale_color_manual(values = c(\"#5F4690\",\"#38A6A5\", \"#73AF48\", \"#E17C05\")) +\n   theme(legend.position=\"none\")\n\n\n\n\np2 <- p2 +\n  scale_x_log10() +\n  scale_y_log10() +\n  theme_minimal() \n\np2 <- plotly::ggplotly(p2, tooltip=\"text\", type='scatter', mode='markers')\n \np2 <- p2 %>% layout(legend = list(x = 0.02, y = 0.9,title=\n                                    list(text='<b> Country class <\/b>')))\n\n\np2 <- p2 %>%  layout(xaxis = list(autotypenumbers = 'strict', title =\n                              'Household final consumption expenditure',\n                              ticks=\"inside\",showline=TRUE), \n               yaxis = list(title = 'National poverty line',ticks=\"inside\",\n                            showline=TRUE),\n               title=\"1c Richer countries tend to have higher national poverty lines\")\np2\n\n\n\n\n\n\n",
    "preview": "projects/2022/100386498/distill-preview.png",
    "last_modified": "2023-01-08T18:35:12+01:00",
    "input_file": "100386498.knit.md",
    "preview_width": 2304,
    "preview_height": 1536
  },
  {
    "path": "projects/gapminder/",
    "title": "Gapminder's World Health Chart",
    "description": "This tutorial reproduces one of the most popular data visualizations ever\nand serves as an example project for this course",
    "author": [
      {
        "name": "Iñaki Ucar",
        "url": {}
      }
    ],
    "date": "2022-09-09",
    "categories": [
      "gapminder"
    ],
    "contents": "\n\nContents\nGetting the data\nBuilding the chart\nCoordinates and axes\nTheme\nAnnotations\nData\nLegend\n\nFinal result\nSingle year\nMultiple years, static\nMultiple years, dynamic\n\n\nHans Rosling was a Swedish professor of International Health at the Karolinska Institute,\nand co-founder of the Gapminder Foundation,\nwhich developed the Trendalyzer software for animated data visualization.\nHis famous 2006 TED Talk,\nDebunking myths about the “third world”,\nhas inspired millions over the world thanks to his celebrated bubble chart\ndepicting the relationship between life expectancy and income.\nGapminder’s World Health Chart. Figure from gapminder.org.The goal of this tutorial is to replicate this famous data visualization step by step.\nGetting the data\nThe data consists of yearly observations of life expectancy values and GDP per capita for a number of countries in the world.\nThis is a very popular dataset.\nWe could download the data directly from the Gapminder homepage,\nbut we will use instead the gapminder package,\nwhich contains ready-to-use data for 142 countries from 1952 to 2007.\n\n\nlibrary(tidyverse)\nlibrary(gapminder)\n\n\nLet’s take a glimpse of the data:\n\n\nglimpse(gapminder)\n\nRows: 1,704\nColumns: 6\n$ country   <fct> \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afgh…\n$ continent <fct> Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, As…\n$ year      <int> 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 19…\n$ lifeExp   <dbl> 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39…\n$ pop       <int> 8425333, 9240934, 10267083, 11537966, 13079460, 14…\n$ gdpPercap <dbl> 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, …\n\nsummary(gapminder)\n\n        country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Asia    :396   Median :1980   Median :60.71  \n Angola     :  12   Europe  :360   Mean   :1980   Mean   :59.47  \n Argentina  :  12   Oceania : 24   3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1  \n                                       \n\nThese are all the variables we need in a tidy format,\nincluding population counts, which will serve to define the size of the bubbles.\nAs we can see, the original visualization includes Oceania into Asia,\nso let’s do the same for our exercise:\n\n\ngapminder <- gapminder %>%\n  mutate(continent = fct_other(continent, drop=\"Oceania\", other_level=\"Asia\"))\nsummary(gapminder)\n\n        country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Europe  :360   Median :1980   Median :60.71  \n Angola     :  12   Asia    :420   Mean   :1980   Mean   :59.47  \n Argentina  :  12                  3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1  \n                                       \n\nBuilding the chart\nCoordinates and axes\nWe will work with a single year for now.\nThe base panel consists of simple Cartesian coordinates,\nand depicts life expectancy vs. GDP per capita,\nalthough the x label says the more understandable term “Income”.\n\n\np <- ggplot(filter(gapminder, year == 2007)) +\n  aes(gdpPercap, lifeExp) +\n  ylab(\"Life expectancy\") + xlab(\"Income\")\np\n\n\n\nBoth axes have fixed limits across the whole animation.\nAnother thing to note about the axes is that income is in logarithmic scale with very specific breaks.\nAlso, numbers above 10 thousand are labeled as “10k”.\nThe function scales::label_number comes in handy for this.\nNote that we make some space for annotations on top of the chart\nby setting the maximum limit of the y axis to 95.\n\n\nbreaks <- 500*2^c(0:8)\nklabel <- scales::label_number(suffix=\"k\", scale=1e-3)\nlabels <- c(breaks[1:5], klabel(breaks[-(1:5)]))\n\np <- p + scale_y_continuous(limits=c(10, 95), breaks=seq(10, 90, 10)) +\n  scale_x_log10(limits=range(breaks), breaks=breaks, labels=labels)\np\n\n\n\nTheme\nNote that the theme is very similar to theme_classic, but shows the major grid.\nWe also instruct the theme to remove the legend,\nbecause we will add a custom one later on.\n\n\np <- p + theme_classic() +\n  theme(panel.grid.major=element_line(), legend.position=\"none\")\np\n\n\n\nAdditionally, we could continue to tinker with fonts and other parameters.\nAnnotations\nThe base panel depicts three annotations:\nA big background number indicating the year in the middle.\nFour income levels on the top part, whose breaks seem to be 3k, 8k and 24k.\nThe axes’ units on the top left and bottom right corners.\nFor the background number, we could use annotate with a fixed label,\nbut we will use geom_text instead, even if we overplot it many times,\nso that the year is read from the data.\n\n\np <- p + geom_text(aes(8000, 50, label=year), size=65, color=\"lightgray\")\np\n\n\n\nNext, we add the income levels.\nAdditionally, we will take the liberty of adding vertical lines to clearly demarcate the breaks.\n\n\ntlevel <- c(1300, 5000, 14000, 40000)\nblevel <- c(3000, 8000, 24000)\nilevel <- c(\"INCOME LEVEL 1\", \"LEVEL 2\", \"LEVEL 3\", \"LEVEL 4\")\n\np <- p + geom_vline(xintercept=blevel, color=\"darkgray\") +\n  annotate(\"text\", x=tlevel, y=95, color=\"darkgray\", vjust=0, size=3, label=ilevel) +\n  annotate(\"text\", x=blevel, y=95, color=\"darkgray\", vjust=0, size=5, label=\"◆\")\np\n\n\n\nFinally, let’s add the units to the axes.\n\n\np <- p +\n  annotate(\"text\", x=128000, y=10, hjust=0.95, vjust=1, size=3,\n           label=\"per person (GDP/capita, PPP$ inflation-adjusted\") +\n  annotate(\"text\", x=500, y=95, hjust=0.5, vjust=-1.5, size=3, angle=90, label=\"years\")\np\n\n\n\nData\nThe chart is a type of scatterplot, with one point per country, and colored by continent.\nThe novelty here is that every dot is scaled up to represent the population size.\nAlso, we will add some transparency to the points.\n\n\np <- p + geom_point(aes(color=continent, size=pop), alpha=0.7)\np\n\n\n\nWe are close, but a couple of adjustments are required.\nLet’s add a black line around the points (see shape 21),\nand adjust the range of the bubbles a bit.\n\n\np <- p + geom_point(aes(size=pop), color=\"#333333\", shape=21) +\n  scale_size_area(max_size=25)\np\n\n\n\nFinally, let’s replicate the same color scale.\nWe need to provide them in the same order as the factor levels:\n\n\nlevels(gapminder$continent)\n\n[1] \"Africa\"   \"Americas\" \"Europe\"   \"Asia\"    \n\nTherefore, from the web, page we obtain:\nAfrica: Blue rgb(0, 213, 233) -> #00d5e9\nAmericas: Green rgb(127, 235, 0) -> #7feb00\nEurope: Yellow rgb(255, 231, 0) -> #ffe700\nAsia: Red rgb(255, 88, 114) -> #ff5872\n\n\nccolors <- c(\"#00d5e9\", \"#7feb00\", \"#ffe700\", \"#ff5872\")\np <- p + scale_color_manual(values=ccolors)\np\n\n\n\nLegend\nThis chart has an interesting legend:\nit takes advantage from the fact that continents are easily recognizable to use a map as a legend.\nLet’s replicate it separately using data from ggplot2::map_data.\n\n\nworld <- map_data(\"world\")\nglimpse(world)\n\nRows: 99,338\nColumns: 6\n$ long      <dbl> -69.89912, -69.89571, -69.94219, -70.00415, -70.06…\n$ lat       <dbl> 12.45200, 12.42300, 12.43853, 12.50049, 12.54697, …\n$ group     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,…\n$ order     <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16,…\n$ region    <chr> \"Aruba\", \"Aruba\", \"Aruba\", \"Aruba\", \"Aruba\", \"Arub…\n$ subregion <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\nThis data needs to be tweaked a little bit. We need to:\nFilter out the Antarctica region.\nAdd a new column continent with the help of the countrycode package.\nInclude Oceania into Asia.\nDrop any missing values for continent.\n\n\nworld <- world %>%\n  filter(region != \"Antarctica\") %>%\n  mutate(continent = countrycode::countrycode(\n    sourcevar=region, origin=\"country.name\", destination=\"continent\")) %>%\n  mutate(continent = fct_other(continent, drop=\"Oceania\", other_level=\"Asia\")) %>%\n  drop_na(continent)\n\n\nNow, let’s create the map:\n\n\nlegend <- ggplot(world) +\n  aes(long, lat, group=group, map_id=region, fill=continent) +\n  geom_map(map=world) +\n  scale_fill_manual(values=ccolors) +\n  theme_void() + theme(legend.position=\"none\")\nlegend\n\n\n\nFinal result\nSingle year\nIn summary, so far we have\nBuild steps:\nset coordinates and axes, with custom breaks;\nset an appropriate theme and prevent the default legend from appearing;\nadded several annotations, including year, income levels and axis units;\nadded the data points and made several adjustments, including size and color;\ncreated a custom legend based on a simple colored world map.\nThere are several ways we can merge the main plot and the legend.\nIn this case, let’s add it as an inset with the custom annotation function.\nNote that, in contrast to the regular annotation function,\nthis one doesn’t seem to support logarithmic scales very well.\nAs a result, the user needs to provide the transformed values directly.\n\n\np <- p + annotation_custom(\n  ggplotGrob(legend), xmin=log10(16000), ymin=10, ymax=40)\np\n\n\n\nFinally, we can improve this static single-year visualization by adding some context,\ni.e. a title, a subtitle and a caption.\n\n\np + labs(\n  title = \"World Life Expectancy vs. Income in 2007\",\n  subtitle = paste(\n    \"African countries are still lagging behind in terms of general life\",\n    \"expectancy.\\nEuropean and American countries are the healthiest\",\n    \"and richest countries in the world.\"),\n  caption = \"Source: gapminder.org\"\n)\n\n\n\nMultiple years, static\nSo far, we covered the case for a single year.\nHow could we show the evolution, which is the point in this dataset?\nOf course we can define facets to plot all the years.\nIn the following chart,\ngginnards::delete_layers is used to remove the background year;\nwe switch to the whole dataset using the %+% operator;\ndata is faceted in two rows;\naxis labels are slightly rotated to make space for them.\nNote also that we need to manually scale down a bit the range of the bubbles\nto preserve more or less the previous aspect ratio.\n\n\ngginnards::delete_layers(p, match_type=\"GeomText\") %+% gapminder +\n  facet_wrap(\"year\", nrow=2) +\n  scale_size_area(max_size=7) +\n  theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1))\n\n\n\nMultiple years, dynamic\nAnd we can of course animate it!\nWe can easily convert any ggplot2 chart to plotly using plotly::ggplotly,\nwhich produces interactive web-based charts.\nFurthermore, if we set the frame aesthetic, it is automatically detected,\nand an animation is added based on the corresponding variable.\n\n\nplotly::ggplotly(p %+% gapminder + aes(frame=year))\n\n\n\n\n\n\n",
    "preview": "projects/gapminder/gapminder_files/figure-html5/titled-1.png",
    "last_modified": "2022-10-07T12:58:42+02:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 936
  }
]
