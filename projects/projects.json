[
  {
    "path": "projects/2022/100385545/",
    "title": "Searches of common jobs: women tends to appear lower than men",
    "description": "A replication of the graph made by Pew Research Center about the topic and another proposal.",
    "author": [
      {
        "name": "Mario Yanes",
        "url": {}
      }
    ],
    "date": "2023-01-16",
    "categories": [
      "2022"
    ],
    "contents": "\n\nContents\nGender equality on online search of jobs?\nLet’s start with the replication\nAdding tiles\nPlot again\nRearrange y-axis\nAesthetic and themes\nProblems\nSolving the x-axis\n\n\nAlternative visualization or improvements\nFinal alternative visualization\n\n\nGender equality on online search of jobs?\nA research conducted by the Pew Research Center on December 2018 showed that inequalities also exist on online search. They represented the obtained data in several graphs, such as the underrepresentation or overrepresentation of women depending on the profession, with a several gap between the results of the search and the actual proportion of women in each occupation.\nBut the graph we are going to replicate on this project is the one that shows the average position obtained by the first male or female depending on the profession. Such graph is the following:\n\n\n\nFigure 1: Original graph from Pew Research Center\n\n\n\nLet’s start with the replication\n\n\nlibrary(tidyverse)\nlibrary(patchwork)\nsysfonts::font_add_google(\"Poppins\", family=\"poppins\")\nsysfonts::font_add_google(\"Tinos\", family=\"tinos\")\nsysfonts::font_add_google(\"Arimo\", family=\"arimo\")\nshowtext::showtext_auto()\n\n\nAfter importing (and installing, if necessary) the libraries needed for this project, the next step is to import the data of the plot. Besides the Pew Research Center didn’t publish the dataset they used to the article alongside it, it’s pretty simple to generate ourselves a dataframe, as they are integers numbers (the position on a search results page) and 20 professions.\n\n\ndf <- data.frame(\n  Profession = c(\"CEO\", \"Professor\", \"Electrical engineer\", \"Security guard\",\n                 \"Banker\", \"Clergy\", \"Industrial engineer\", \"Bartender\", \"Musician\",\n                 \"Chef\", \"Movie director\", \"Police\", \"Athlete\", \"Medical scientist\",\n                 \"Physician\", \"Pharmacist\", \"Nurse\", \"Clerk\", \"Customer service rep.\",\n                 \"Housekeeper\"),\n  Male = c(2, 2, 3, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3, 4, 4, 4, 6),\n  Female = c(16, 13, 10, 8, 9, 8, 7, 7, 6, 6, 6, 5, 5, 4, 3, 3, 4, 3, 2, 2)\n)\n\n\nAs for now, we have the data we want to plot. Let’s focus on generating the plot. Following the original graph, the position of the first male/female that appears on a web search of a certain job is plotted as a tile. The tile is #eb9f2e if it’s a male, #83669f if it’s a female.\n\n\np <- ggplot(df, aes(y=Profession)) + \n  geom_tile(aes(x=Male), fill=\"#eb9f2e\", color = \"#eb9f2e\", width = 0.35, height = 0.7) + \n  geom_tile(aes(x=Female), fill=\"#83669f\", color = \"#83669f\", width = 0.35, height =0.7)\n\np\n\n\n\nAt this time, we have one major issue: we only plotted the female/male tiles, but the original graph has another 14 white tiles (or 15, on Pharmacist and Nurse, where both gender have the same value), as they represent all the possible values.\nAdding tiles\nThe way of adding the blank tiles that represent all the possible values was tricky. First of all, my intention was trying to generate them automatically with a given R function, but I was not capable of. Instead, I added to the dataset 16 new variables, one per column, that would fit on the x-axis and be the “empty” tiles. In order from 1 to 16, I added the positions that were left. So the entire and final dataframe resulted on the following:\n\n\ndf <- df %>%\n  mutate(\n    position = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),\n    position2 = c(3, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 4, 2, 2, 2, 3, 3),\n    position3 = c(4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 4, 3, 5, 5, 4),\n    position4 = c(5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 5),\n    position5 = c(6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 6, 6, 7, 7, 7),\n    position6 = c(7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8),\n    position7 = c(8, 8, 8, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 9, 9, 9),\n    position8 = c(9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10),\n    position9 = c(10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 11, 11, 11),\n    position10 = c(11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 12, 12, 12),\n    position11 = c(12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 13, 13, 13),\n    position12 = c(13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 14, 14, 14),\n    position13 = c(14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 15, 15, 15),\n    position14 = c(15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 16),\n    position15 = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 16, 16, NA, NA, NA)\n)\n\n\nPlot again\nDone that, the plot should have now all the needed tiles, both of the gender variable and all the possible positions. So we add to the first code we plotted the geom_tile() for each new variable we added to the dataset, as the following:\n\n\np <- ggplot(df, aes(y=Profession)) + \n  geom_tile(aes(x=Male), fill=\"#eb9f2e\", color = \"#eb9f2e\", width = 0.35, height = 0.7) + \n  geom_tile(aes(x=Female), fill=\"#83669f\", color = \"#83669f\", width = 0.35, height =0.7) +\n  geom_tile(aes(x=position), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) +\n  geom_tile(aes(x=position2), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) +\n  geom_tile(aes(x=position3), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) +\n  geom_tile(aes(x=position4), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) +\n  geom_tile(aes(x=position5), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) +\n  geom_tile(aes(x=position6), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) +\n  geom_tile(aes(x=position7), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) +\n  geom_tile(aes(x=position8), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) +\n  geom_tile(aes(x=position9), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) +\n  geom_tile(aes(x=position10), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) +\n  geom_tile(aes(x=position11), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) +\n  geom_tile(aes(x=position12), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) +\n  geom_tile(aes(x=position13), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) +\n  geom_tile(aes(x=position14), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) +\n  geom_tile(aes(x=position15), fill=\"white\", color = \"grey\", width = 0.35, height = 0.7) \n\np\n\n\n\nRearrange y-axis\nThis graph has the essential parts of the original one. Nonetheless, the order of the y-axis is not the same, besides we created the dataframe following, from top to bottom, the graph of the Pew Research Center. To fix that, we can use the function scale_y_discrete(limits = rev(df$Profession). We also use the scale_y_discrete() function to add some space at the top of the grid, as we will needed it for the title and the subtitle:\n\n\np <- p + scale_fill_manual(values=c(position =\"white\",\n                             Male =\"#eb9f2e\",\n                             Female = \"#83669f\")) +\n  scale_y_discrete(limits = rev(df$Profession), expand = expansion(mult = c(0, 0.1))) \n\np\n\n\n\nAesthetic and themes\nNow we have a graph that follows the original one in its factor form, but we have to modify the appearance to achieve a replica.\nFirst of all, they removed the axis title of both y and x-axis. Also, the title and the subtitle and the attribution of the plot, and one important thing: the legend. The legend is added to the graph in a particularly way: Male and Female are not together in a traditional box or something like that, as they are on top of the corresponding first tile. So, instead of using labs or another related function, we insert “Male” and “Female” as an annotation. With the extra space we gave to the top of the grid, the words are not cut by the space of the subtitle.\n\n\np <- p + labs(\n    x = \"\",\n    y = \"\",\n    title = \"Women appear lower in image\\nsearch results for common jobs\\nacross countries\",\n    subtitle = \"\\nAverage position of the first man or woman\\nin image search results for ...\\n \"\n  ) +\n  annotate(\"text\", x = 2, y = 21, label = \"Male\", size = 3, color = \"#eb9f2e\",\n           fontface = 2, family = \"arimo\") +\n  annotate(\"text\", x = 16, y = 21, label = \"Female\", size = 3, color = \"#83669f\",\n           fontface = 2, family = \"arimo\") \n\np\n\n\n\nThe trickiest thing we tended to solve is the tiles of Pharmacist and Nurse, the only ones where Male and Female have the same value. The closest approach was generating an annotation with a rectangle (instead of a triangle, as it was impossible to achieve):\n\n\np <- p +\n  annotate(\"rect\", xmin = 3.05, xmax = 3.2, ymin = 4.65, ymax = 5.3, alpha = 1,\n           color = \"#eb9f2e\", fill = \"#eb9f2e\") +\n  annotate(\"rect\", xmin = 4.05, xmax = 4.2, ymin = 3.65, ymax = 4.3, alpha = 1,\n           color = \"#eb9f2e\", fill = \"#eb9f2e\") \n\np\n\n\n\nFinally, we adjust the things related to the themes. The grid has to be completely white and without borders, the axis ticks and line disappear and we try to have the same font family as the original one, as well of adjusting on the horizontal axis the title and the subtitle. This results in the final graph.\n\n\np <- p + theme_light() +\n  theme(\n  panel.background = element_blank(),\n  panel.grid = element_line(size = 0.25, color = \"white\"),\n  axis.ticks = element_blank(),\n  axis.line = element_blank(),\n  panel.border = element_blank(),\n  axis.text = element_text(family = \"tinos\"),\n  axis.text.x = element_blank(),\n  plot.title = element_text(face = \"bold\", family = \"arimo\", hjust = 0),\n  plot.subtitle = element_text(color = \"grey\", face = \"italic\", family = \"tinos\",\n                               hjust = 0, vjust = 4),\n  plot.caption = element_text(hjust = 0),\n  axis.title = element_blank()\n)\n\np\n\n\n\nProblems\nIf we compare the original graph and the replica one, we see three main differences. The first difference is the width of the plot and the distance between the columns of tiles. Through different manners we tried to narrow the grid, but these actions tended to deform the tiles and the graph.\nThe second difference is located at the tiles of Pharmacist and Nurse, where the original one plotted the tiles half #eb9f2e and half #83669f with each color in a triangle. The closest approach was generating an annotation with geom_rect(), as geom_polygon() couldn’t be printed in a annotation, besides several tries.\nThe third difference is the x-axis. While seemed to be an easy way to modify the breaks of the axis in order to show 1, 4, 8, 12 and 16, at the moment we introduced to the code the scale_x_discrete(breaks = c(1, 4, 8, 12, 16)) or scale_x_discrete(limits = c(1,16), breaks = c(1, 4, 8, 12, 16)), the x-axis disappears and also some data is not plotted correctly.\nSolving the x-axis\nThe solution I found to solve the problem with the breaks of the x-axis was to expand the bottom of the graph and introducing the labels as regular text with anotate.\n\n\np <- p + expand_limits(y = -1.5) +\n  annotate(\"text\", x = 1, y = -.9, label = \"1st\", size = 3.25, color = \"#76777a\",\n           fontface = 1, family = \"tinos\") +\n  annotate(\"text\", x = 4, y = -.9, label = \"4th\", size = 3.25, color = \"#76777a\",\n           fontface = 1, family = \"tinos\") +\n  annotate(\"text\", x = 8, y = -.9, label = \"8th\", size = 3.25, color = \"#76777a\",\n           fontface = 1, family = \"tinos\") +\n  annotate(\"text\", x = 12, y = -.9, label = \"12th\", size = 3.25, color = \"#76777a\",\n           fontface = 1, family = \"tinos\") +\n  annotate(\"text\", x = 16, y = -.9, label = \"16th\", size = 3.25, color = \"#76777a\",\n           fontface = 1, family = \"tinos\") +\n  annotate(\"text\", x = 1, y = 0.4, label = \"|\", size = 2, color = \"#76777a\",\n           fontface = 1, family = \"arimo\") +\n  annotate(\"text\", x = 4, y = 0.4, label = \"|\", size = 2, color = \"#76777a\",\n           fontface = 1, family = \"arimo\") +\n  annotate(\"text\", x = 8, y = 0.4, label = \"|\", size = 2, color = \"#76777a\",\n           fontface = 1, family = \"arimo\") +\n  annotate(\"text\", x = 12, y = 0.4, label = \"|\", size = 2, color = \"#76777a\",\n           fontface = 1, family = \"arimo\") +\n  annotate(\"text\", x = 16, y = 0.4, label = \"|\", size = 2, color = \"#76777a\",\n           fontface = 1, family = \"arimo\")\np\n\n\n\nAlternative visualization or improvements\nWhen thinking about another ways of plotting the same data while maintaining the essence and the meaning of the graph, the first thing that came to my mind was to plot the searches individually and in a vertically way. The goal is to keep a familiar look and feel to an actual web search engine. The spirit is the same, but instead of tiles, rectangles figures that tend to be similar to the boxes that Google, DuckDuckGo and other search engines use to organize the results.\nThe first step was to recreate the dataset inverting the position of the tiles, as 1 being 16, 2 being 15 and so on, as we want to plot the first positions on top, instead from bottom to top.\n\n\na_df <- data.frame(\n  Profession = c(\"CEO\", \"Professor\", \"Electrical engineer\", \"Security guard\",\n                 \"Banker\", \"Blank\", \"Clergy\", \"Industrial engineer\", \"Bartender\",\n                 \"Musician\", \"Chef\", \"Movie director\", \"Police\", \"Athlete\",\n                 \"Medical scientist\", \"Physician\", \"Blank\", \"Pharmacist\", \"Nurse\",\n                 \"Clerk\", \"Customer service rep.\", \"Housekeeper\"),\n  Male = c(15, 15, 14, 15, 14, NA, 15, 15, 15, 15, 15, 15, 15, 14, 14, 15, NA, 14, 13, 13, 13, 11),\n  Female = c(1, 4, 8, 9, 7, NA,  9, 10, 10, 11, 11, 11, 12, 12, 13, 14, NA, 14, 13, 14, 15, 15),\n  position = c(16, 16, 16, 16, 16, NA, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, NA, 16, 16, 16, 16, 16),\n  position2 = c(14, 14, 15, 14, 15, NA, 14, 14, 14, 14, 14, 14, 14, 15, 15, 13, NA, 15, 15, 15, 14, 14),\n  position3 = c(13, 13, 13, 13, 13, NA, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, NA, 13, 14, 12, 12, 13),\n  position4 = c(12, 12, 12, 12, 12, NA, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, NA, 12, 12, 11, 11, 12),\n  position5 = c(12, 12, 12, 12, 12, NA, 12, 12, 12, 10, 10, 11, 11, 11, 11, 11, NA, 12, 12, 11, 11, 11),\n  position6 = c(11, 11, 11, 11, 11, NA, 11, 9, 9, 9, 9, 9, 9, 9, 9, 9, NA, 11, 11, 9, 9, 9),\n  position7 = c(9, 9, 9, 8, 9, NA, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, NA, 9, 9, 8, 8, 8),\n  position8 = c(8, 8, 7, 7, 8, NA, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, NA, 8, 8, 7, 7, 7),\n  position9 = c(7, 7, 6, 6, 6, NA, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, NA, 7, 7, 6, 6, 6),\n  position10 = c(6, 6, 5, 5, 5, NA, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, NA, 6, 6, 5, 5, 5),\n  position11 = c(5, 5, 4, 4, 4, NA, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, NA, 5, 5, 4, 4, 4),\n  position12 = c(4, 3, 3, 3, 3, NA, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, NA, 4, 4, 3, 3, 3),\n  position13 = c(3, 2, 2, 2, 2, NA, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, NA, 3, 3, 2, 2, 2),\n  position14 = c(2, 1, 1, 1, 1, NA, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, NA, 2, 2, 1, 1, 1),\n  position15 = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 1, 1, NA, NA, NA)\n) \n\n\nThe next step is to create dataframes for every graph we want to plot (and join at the last steps). As there are 20 positions, we divide them in 2 different dataframes. We use the entire dataframe we’ve just created and divide it maintaining the positions and adding another column to fix the empty tiles.\n\n\nf_df <- a_df %>% slice(1:(n()-11)) %>% \n  mutate(position15 = c(10, 10, 10, 10, 10, NA, 10, 11, 11, 10, 10))\n\nfo_df <- a_df %>% slice(12:n()) %>% \n  mutate(position15 = c(10, 10, 10, 10, 10, NA, 10, 10, 10, 10, 10)) %>% \n  mutate(position5 = c(NA, NA, NA, NA, NA, NA, 12, 12, 11, 11, NA)) %>% \n  mutate(position16 = c(1, 1, NA, NA, NA, NA, 1, 1, NA, NA, NA))\n\n\nWith the two dataframes, we set the variable Profession as a factor and we indicate the order in we want it to be plotted with the levels option.\n\n\nf_df$Profession <- factor(f_df$Profession, levels = c(\n  \"Professor\", \"CEO\", \"Electrical engineer\", \"Banker\", \"Security guard\", \"Blank\", \n  \"Clergy\", \"Industrial engineer\", \"Bartender\", \"Musician\", \"Chef\" ))\n\np1 <- ggplot(f_df, aes(x = Profession)) + \n  geom_tile(aes(y=Male), fill=\"#eb9f2e\", color = \"#eb9f2e\", width = 0.7, height = 0.8, size = 1) + \n  geom_tile(aes(y=Female), fill=\"#83669f\", color = \"#83669f\", width = 0.7, height = 0.8, size = 1) +\n  geom_tile(aes(y=position), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position2), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position3), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position4), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position5), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position6), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position7), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position8), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position9), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position10), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position11), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position12), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position13), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position14), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position15), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  #geom_tile(aes(y=position16), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  scale_fill_manual(values=c(position =\"white\",\n                             Male =\"#eb9f2e\",\n                             Female = \"#83669f\")) +\n  scale_x_discrete(position = \"top\", guide = guide_axis(n.dodge=2)) +\n  annotate(\"text\", x = 6, y = 15, label = \"Male\", size = 3.5, color = \"#eb9f2e\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 6, y = 9.05, label = \"Female\", size = 3.5, color = \"#83669f\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.1, y = 16, label = \"1st\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.1, y = 13, label = \"4th\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.1, y = 9, label = \"8th\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.1, y = 5, label = \"12th\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.1, y = 1, label = \"16th\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.5, y = 16, label = \"—\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.5, y = 13, label = \"—\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.5, y = 9, label = \"—\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.5, y = 5, label = \"—\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.5, y = 1, label = \"—\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 1, y = 17.2, label = \"Professor\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 2, y = 18.2, label = \"CEO\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 3, y = 17.2, label = \"Electrical eng.\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 4, y = 18.2, label = \"Banker\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 5, y = 17.2, label = \"Security guard\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 7, y = 17.2, label = \"Clergy\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 8, y = 18.2, label = \"Industrial eng.\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 9, y = 17.2, label = \"Bartender\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 10, y = 18.2, label = \"Musician\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 11, y = 17.2, label = \"Chef\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  expand_limits(x = c(-.5, 12.5), y = c(0, 18)) +\nlabs(\n    title = \"Women appear lower in image search results\\nfor common jobs across countries\\n\",\n    subtitle = \"Average position of the first man or woman in image search results for ... \"\n  ) +\n  theme_light() +\n  theme(\n  panel.background = element_blank(),\n  panel.grid = element_line(size = 0.25, color = \"white\"),\n  axis.ticks = element_blank(),\n  axis.line = element_blank(),\n  #panel.border = element_blank(),\n  axis.text = element_blank(),\n  #axis.text.x = element_text(size = 10),\n  #axis.text.y = element_blank(),\n  plot.title = element_text(face = \"bold\", family = \"poppins\", hjust = 0.5),\n  plot.subtitle = element_text(color = \"grey\", face = \"italic\", family = \"poppins\",\n                               hjust = .5, vjust = 4),\n  plot.caption = element_text(hjust = 0),\n  axis.title = element_blank()\n)\n\n\nIn this case, we also rename the profession “Customer service rep.” to “Cust. serv. rep.” in order to make the name shorter and avoid overlapping.\n\n\nfo_df[fo_df$Profession == \"Customer service rep.\", \"Profession\"] <- \"Cust. serv. rep.\"\n\nfo_df$Profession <- factor(fo_df$Profession, levels = c(\n  \"Movie director\", \"Police\", \"Athlete\", \"Medical scientist\", \"Physician\",\n  \"Blank\", \"Pharmacist\", \"Nurse\", \"Clerk\", \"Cust. serv. rep.\", \"Housekeeper\"))\n\n\np2 <- ggplot(fo_df, aes(x = Profession)) + \n  geom_tile(aes(y=Male), fill=\"#eb9f2e\", color = \"#eb9f2e\", width = 0.7, height = 0.8, size = 1) + \n  geom_tile(aes(y=Female), fill=\"#83669f\", color = \"#83669f\", width = 0.7, height = 0.8, size = 1) +\n  geom_tile(aes(y=position), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position2), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position3), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position4), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position5), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position6), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position7), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position8), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position9), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position10), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position11), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position12), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position13), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position14), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position15), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  geom_tile(aes(y=position16), fill=\"white\", color = \"black\", width = 0.7, height = 0.8, size = 0.2) +\n  scale_fill_manual(values=c(position =\"white\",\n                             Male =\"#eb9f2e\",\n                             Female = \"#83669f\")) +\n  scale_x_discrete(position = \"top\", guide = guide_axis(n.dodge=2)) +\n  annotate(\"rect\", xmin = 7, xmax = 7.35, ymin = 13.6, ymax = 14.4, alpha = 1,\n           color = \"#eb9f2e\", fill = \"#eb9f2e\") +\n  annotate(\"rect\", xmin = 8, xmax = 8.35, ymin = 12.6, ymax = 13.4, alpha = 1,\n           color = \"#eb9f2e\", fill = \"#eb9f2e\") +\n  #expand_limits(x = 0.25, ) +\n  annotate(\"text\", x = 6, y = 15, label = \"Male\", size = 3.5, color = \"#eb9f2e\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 6, y = 14.05, label = \"Female\", size = 3.5, color = \"#83669f\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.1, y = 16, label = \"1st\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.1, y = 13, label = \"4th\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.1, y = 9, label = \"8th\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.1, y = 5, label = \"12th\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.1, y = 1, label = \"16th\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.5, y = 16, label = \"—\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.5, y = 13, label = \"—\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.5, y = 9, label = \"—\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.5, y = 5, label = \"—\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 0.5, y = 1, label = \"—\", size = 3.25, color = \"#6d6e71\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 1, y = 17.2, label = \"Movie director\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 2, y = 18.2, label = \"Police\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 3, y = 17.2, label = \"Athlete\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 4, y = 18.2, label = \"Medical scientist\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 5, y = 17.2, label = \"Physician\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 7, y = 17.2, label = \"Pharmacist\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 8, y = 18.2, label = \"Nurse\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 9, y = 17.2, label = \"Clerk\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 10, y = 18.2, label = \"Cust. serv. rep.\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  annotate(\"text\", x = 11, y = 17.2, label = \"Housekeeper\", size = 3.25, color = \"black\",\n           fontface = 1, family = \"poppins\") +\n  expand_limits(x = c(-.5, 12.5), y = c(-.5, 18)) +\n  theme_light() +\n  theme(\n  panel.background = element_blank(),\n  panel.grid = element_line(size = 0.25, color = \"white\"),\n  axis.ticks = element_blank(),\n  axis.line = element_blank(),\n  axis.text = element_blank(),\n  plot.title = element_text(face = \"bold\", family = \"poppins\", hjust = 0.5),\n  plot.subtitle = element_text(color = \"grey\", face = \"italic\", family = \"poppins\",\n                               hjust = .5, vjust = 2),\n  plot.caption = element_text(hjust = 0),\n  axis.title = element_blank()\n)\n\n\nFinal alternative visualization\nAnd finally, here we have our alternative visualization, merging the two previous plots:\n\n\np1 / p2\n\n\n\n\n\n\n",
    "preview": "projects/2022/100385545/100385545_files/figure-html5/unnamed-chunk-11-1.png",
    "last_modified": "2023-01-16T00:03:25+01:00",
    "input_file": "100385545.knit.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "projects/gapminder/",
    "title": "Gapminder's World Health Chart",
    "description": "This tutorial reproduces one of the most popular data visualizations ever\nand serves as an example project for this course",
    "author": [
      {
        "name": "Iñaki Ucar",
        "url": {}
      }
    ],
    "date": "2022-09-09",
    "categories": [
      "gapminder"
    ],
    "contents": "\n\nContents\nGetting the data\nBuilding the chart\nCoordinates and axes\nTheme\nAnnotations\nData\nLegend\n\nFinal result\nSingle year\nMultiple years, static\nMultiple years, dynamic\n\n\nHans Rosling was a Swedish professor of International Health at the Karolinska Institute,\nand co-founder of the Gapminder Foundation,\nwhich developed the Trendalyzer software for animated data visualization.\nHis famous 2006 TED Talk,\nDebunking myths about the “third world”,\nhas inspired millions over the world thanks to his celebrated bubble chart\ndepicting the relationship between life expectancy and income.\nGapminder’s World Health Chart. Figure from gapminder.org.The goal of this tutorial is to replicate this famous data visualization step by step.\nGetting the data\nThe data consists of yearly observations of life expectancy values and GDP per capita for a number of countries in the world.\nThis is a very popular dataset.\nWe could download the data directly from the Gapminder homepage,\nbut we will use instead the gapminder package,\nwhich contains ready-to-use data for 142 countries from 1952 to 2007.\n\n\nlibrary(tidyverse)\nlibrary(gapminder)\n\n\nLet’s take a glimpse of the data:\n\n\nglimpse(gapminder)\n\nRows: 1,704\nColumns: 6\n$ country   <fct> \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afgh…\n$ continent <fct> Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, As…\n$ year      <int> 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 19…\n$ lifeExp   <dbl> 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39…\n$ pop       <int> 8425333, 9240934, 10267083, 11537966, 13079460, 14…\n$ gdpPercap <dbl> 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, …\n\nsummary(gapminder)\n\n        country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Asia    :396   Median :1980   Median :60.71  \n Angola     :  12   Europe  :360   Mean   :1980   Mean   :59.47  \n Argentina  :  12   Oceania : 24   3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1  \n                                       \n\nThese are all the variables we need in a tidy format,\nincluding population counts, which will serve to define the size of the bubbles.\nAs we can see, the original visualization includes Oceania into Asia,\nso let’s do the same for our exercise:\n\n\ngapminder <- gapminder %>%\n  mutate(continent = fct_other(continent, drop=\"Oceania\", other_level=\"Asia\"))\nsummary(gapminder)\n\n        country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Europe  :360   Median :1980   Median :60.71  \n Angola     :  12   Asia    :420   Mean   :1980   Mean   :59.47  \n Argentina  :  12                  3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1  \n                                       \n\nBuilding the chart\nCoordinates and axes\nWe will work with a single year for now.\nThe base panel consists of simple Cartesian coordinates,\nand depicts life expectancy vs. GDP per capita,\nalthough the x label says the more understandable term “Income”.\n\n\np <- ggplot(filter(gapminder, year == 2007)) +\n  aes(gdpPercap, lifeExp) +\n  ylab(\"Life expectancy\") + xlab(\"Income\")\np\n\n\n\nBoth axes have fixed limits across the whole animation.\nAnother thing to note about the axes is that income is in logarithmic scale with very specific breaks.\nAlso, numbers above 10 thousand are labeled as “10k”.\nThe function scales::label_number comes in handy for this.\nNote that we make some space for annotations on top of the chart\nby setting the maximum limit of the y axis to 95.\n\n\nbreaks <- 500*2^c(0:8)\nklabel <- scales::label_number(suffix=\"k\", scale=1e-3)\nlabels <- c(breaks[1:5], klabel(breaks[-(1:5)]))\n\np <- p + scale_y_continuous(limits=c(10, 95), breaks=seq(10, 90, 10)) +\n  scale_x_log10(limits=range(breaks), breaks=breaks, labels=labels)\np\n\n\n\nTheme\nNote that the theme is very similar to theme_classic, but shows the major grid.\nWe also instruct the theme to remove the legend,\nbecause we will add a custom one later on.\n\n\np <- p + theme_classic() +\n  theme(panel.grid.major=element_line(), legend.position=\"none\")\np\n\n\n\nAdditionally, we could continue to tinker with fonts and other parameters.\nAnnotations\nThe base panel depicts three annotations:\nA big background number indicating the year in the middle.\nFour income levels on the top part, whose breaks seem to be 3k, 8k and 24k.\nThe axes’ units on the top left and bottom right corners.\nFor the background number, we could use annotate with a fixed label,\nbut we will use geom_text instead, even if we overplot it many times,\nso that the year is read from the data.\n\n\np <- p + geom_text(aes(8000, 50, label=year), size=65, color=\"lightgray\")\np\n\n\n\nNext, we add the income levels.\nAdditionally, we will take the liberty of adding vertical lines to clearly demarcate the breaks.\n\n\ntlevel <- c(1300, 5000, 14000, 40000)\nblevel <- c(3000, 8000, 24000)\nilevel <- c(\"INCOME LEVEL 1\", \"LEVEL 2\", \"LEVEL 3\", \"LEVEL 4\")\n\np <- p + geom_vline(xintercept=blevel, color=\"darkgray\") +\n  annotate(\"text\", x=tlevel, y=95, color=\"darkgray\", vjust=0, size=3, label=ilevel) +\n  annotate(\"text\", x=blevel, y=95, color=\"darkgray\", vjust=0, size=5, label=\"◆\")\np\n\n\n\nFinally, let’s add the units to the axes.\n\n\np <- p +\n  annotate(\"text\", x=128000, y=10, hjust=0.95, vjust=1, size=3,\n           label=\"per person (GDP/capita, PPP$ inflation-adjusted\") +\n  annotate(\"text\", x=500, y=95, hjust=0.5, vjust=-1.5, size=3, angle=90, label=\"years\")\np\n\n\n\nData\nThe chart is a type of scatterplot, with one point per country, and colored by continent.\nThe novelty here is that every dot is scaled up to represent the population size.\nAlso, we will add some transparency to the points.\n\n\np <- p + geom_point(aes(color=continent, size=pop), alpha=0.7)\np\n\n\n\nWe are close, but a couple of adjustments are required.\nLet’s add a black line around the points (see shape 21),\nand adjust the range of the bubbles a bit.\n\n\np <- p + geom_point(aes(size=pop), color=\"#333333\", shape=21) +\n  scale_size_area(max_size=25)\np\n\n\n\nFinally, let’s replicate the same color scale.\nWe need to provide them in the same order as the factor levels:\n\n\nlevels(gapminder$continent)\n\n[1] \"Africa\"   \"Americas\" \"Europe\"   \"Asia\"    \n\nTherefore, from the web, page we obtain:\nAfrica: Blue rgb(0, 213, 233) -> #00d5e9\nAmericas: Green rgb(127, 235, 0) -> #7feb00\nEurope: Yellow rgb(255, 231, 0) -> #ffe700\nAsia: Red rgb(255, 88, 114) -> #ff5872\n\n\nccolors <- c(\"#00d5e9\", \"#7feb00\", \"#ffe700\", \"#ff5872\")\np <- p + scale_color_manual(values=ccolors)\np\n\n\n\nLegend\nThis chart has an interesting legend:\nit takes advantage from the fact that continents are easily recognizable to use a map as a legend.\nLet’s replicate it separately using data from ggplot2::map_data.\n\n\nworld <- map_data(\"world\")\nglimpse(world)\n\nRows: 99,338\nColumns: 6\n$ long      <dbl> -69.89912, -69.89571, -69.94219, -70.00415, -70.06…\n$ lat       <dbl> 12.45200, 12.42300, 12.43853, 12.50049, 12.54697, …\n$ group     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,…\n$ order     <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16,…\n$ region    <chr> \"Aruba\", \"Aruba\", \"Aruba\", \"Aruba\", \"Aruba\", \"Arub…\n$ subregion <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\nThis data needs to be tweaked a little bit. We need to:\nFilter out the Antarctica region.\nAdd a new column continent with the help of the countrycode package.\nInclude Oceania into Asia.\nDrop any missing values for continent.\n\n\nworld <- world %>%\n  filter(region != \"Antarctica\") %>%\n  mutate(continent = countrycode::countrycode(\n    sourcevar=region, origin=\"country.name\", destination=\"continent\")) %>%\n  mutate(continent = fct_other(continent, drop=\"Oceania\", other_level=\"Asia\")) %>%\n  drop_na(continent)\n\n\nNow, let’s create the map:\n\n\nlegend <- ggplot(world) +\n  aes(long, lat, group=group, map_id=region, fill=continent) +\n  geom_map(map=world) +\n  scale_fill_manual(values=ccolors) +\n  theme_void() + theme(legend.position=\"none\")\nlegend\n\n\n\nFinal result\nSingle year\nIn summary, so far we have\nBuild steps:\nset coordinates and axes, with custom breaks;\nset an appropriate theme and prevent the default legend from appearing;\nadded several annotations, including year, income levels and axis units;\nadded the data points and made several adjustments, including size and color;\ncreated a custom legend based on a simple colored world map.\nThere are several ways we can merge the main plot and the legend.\nIn this case, let’s add it as an inset with the custom annotation function.\nNote that, in contrast to the regular annotation function,\nthis one doesn’t seem to support logarithmic scales very well.\nAs a result, the user needs to provide the transformed values directly.\n\n\np <- p + annotation_custom(\n  ggplotGrob(legend), xmin=log10(16000), ymin=10, ymax=40)\np\n\n\n\nFinally, we can improve this static single-year visualization by adding some context,\ni.e. a title, a subtitle and a caption.\n\n\np + labs(\n  title = \"World Life Expectancy vs. Income in 2007\",\n  subtitle = paste(\n    \"African countries are still lagging behind in terms of general life\",\n    \"expectancy.\\nEuropean and American countries are the healthiest\",\n    \"and richest countries in the world.\"),\n  caption = \"Source: gapminder.org\"\n)\n\n\n\nMultiple years, static\nSo far, we covered the case for a single year.\nHow could we show the evolution, which is the point in this dataset?\nOf course we can define facets to plot all the years.\nIn the following chart,\ngginnards::delete_layers is used to remove the background year;\nwe switch to the whole dataset using the %+% operator;\ndata is faceted in two rows;\naxis labels are slightly rotated to make space for them.\nNote also that we need to manually scale down a bit the range of the bubbles\nto preserve more or less the previous aspect ratio.\n\n\ngginnards::delete_layers(p, match_type=\"GeomText\") %+% gapminder +\n  facet_wrap(\"year\", nrow=2) +\n  scale_size_area(max_size=7) +\n  theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1))\n\n\n\nMultiple years, dynamic\nAnd we can of course animate it!\nWe can easily convert any ggplot2 chart to plotly using plotly::ggplotly,\nwhich produces interactive web-based charts.\nFurthermore, if we set the frame aesthetic, it is automatically detected,\nand an animation is added based on the corresponding variable.\n\n\nplotly::ggplotly(p %+% gapminder + aes(frame=year))\n\n\n\n\n\n\n",
    "preview": "projects/gapminder/gapminder_files/figure-html5/titled-1.png",
    "last_modified": "2022-10-07T12:58:42+02:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 936
  }
]
